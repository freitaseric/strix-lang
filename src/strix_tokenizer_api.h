#ifndef STRIX_TOKENIZER_API_H
#define STRIX_TOKENIZER_API_H

typedef enum {
    // Single-Char tokens
    STRIX_TOKEN_LEFT_PAREN, STRIX_TOKEN_RIGHT_PAREN, STRIX_TOKEN_LEFT_BRACE, STRIX_TOKEN_RIGHT_BRACE,
    STRIX_TOKEN_COMMA, STRIX_TOKEN_DOT, STRIX_TOKEN_SEMICOLON,
    STRIX_TOKEN_MINUS, STRIX_TOKEN_PLUS, STRIX_TOKEN_SLASH, STRIX_TOKEN_STAR,

    // One or two chars token
    STRIX_TOKEN_BANG, STRIX_TOKEN_BANG_EQUAL,
    STRIX_TOKEN_EQUAL, STRIX_TOKEN_EQUAL_EQUAL,
    STRIX_TOKEN_GREATER, STRIX_TOKEN_GREATER_EQUAL,
    STRIX_TOKEN_LESS, STRIX_TOKEN_LESS_EQUAL,

    // Literals
    STRIX_TOKEN_IDENTIFIER, STRIX_TOKEN_STRING, STRIX_TOKEN_NUMBER,
    STRIX_TOKEN_TRUE, STRIX_TOKEN_FALSE, STRIX_TOKEN_NIL,

    // Built-in
    STRIX_TOKEN_ECHO,

    // Keywords
    STRIX_TOKEN_IF, STRIX_TOKEN_ELIF, STRIX_TOKEN_ELSE, STRIX_TOKEN_WHEN,
    STRIX_TOKEN_FOR, STRIX_TOKEN_WHILE, STRIX_TOKEN_DO, STRIX_TOKEN_LOOP,
    STRIX_TOKEN_STATIC, STRIX_TOKEN_CLASS, STRIX_TOKEN_ENUM, STRIX_TOKEN_TYPEALIAS,
    STRIX_TOKEN_RETURN, STRIX_TOKEN_SUPER, STRIX_TOKEN_SELF,

    STRIX_TOKEN_END_OF_FILE,
    STRIX_TOKEN_UNKNOWN,
    STRIX_TOKEN_ERROR
} StrixTokenTypeC;

typedef struct {
    StrixTokenTypeC type;
    char lexeme[256];
    int line;
    int column;
} StrixTokenInfo;

#endif // STRIX_TOKENIZER_API_H
